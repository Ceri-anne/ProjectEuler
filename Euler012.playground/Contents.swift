//The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
//
//1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
//Let us list the factors of the first seven triangle numbers:
//
// 1: 1
// 3: 1,3
// 6: 1,2,3,6
//10: 1,2,5,10
//15: 1,3,5,15
//21: 1,3,7,21
//28: 1,2,4,7,14,28
//We can see that 28 is the first triangle number to have over five divisors.
//
//What is the value of the first triangle number to have over five hundred divisors?
//

import Foundation

func triangleNumbersWithDivisors(factorCount: Int) -> Int {
    
    var n = 1
    var numberOfFactors = 0
    var triangle = 1
    
    while numberOfFactors <= factorCount {

        triangle = n*(n+1)/2
        numberOfFactors = factors(of: triangle).count
        n += 1

    }
    
    return triangle
    
}

func factors(of n: Int) -> [Int] {
    
    var result = [1, n]
    let max = Int(Float(n).squareRoot())
    
    guard n > 1, max > 1 else {
        return result
    }
    
    if n.isMultiple(of: max) {
        result.append(max)
    }
    
    for i in 2..<max {
        if n.isMultiple(of: i) {
        
            result.append(i)
            result.append(n/i)
        }
    }
    
    return result
    
}

triangleNumbersWithDivisors(factorCount: 500)
